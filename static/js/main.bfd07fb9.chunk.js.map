{"version":3,"sources":["Passage.js","CrossReference.js","App.js","serviceWorker.js","index.js"],"names":["DivWithPointer","styled","props","cursor","Passage","passage","data","book","verses","Card","CardHeader","title","CardContent","map","verse","content","number","key","CrossReference","crossReferences","crossReference","useStyles","makeStyles","root","fontSize","ImageInput","display","Container","padding","CameraBackground","height","width","position","alignItems","justifyContent","Preview","App","classes","React","useState","isDrawerOpen","setIsDrawerOpen","isCameraOpen","setIsCameraOpen","isPreview","setIsPreview","view","setView","image","setImage","setData","handleSubmit","paramImage","imageToPost","console","log","process","fetch","method","headers","body","JSON","stringify","then","res","json","CssBaseline","Drawer","anchor","open","onClose","List","ListItem","button","onClick","ListItemIcon","PhotoCamera","ListItemText","primary","Equalizer","Slide","direction","in","mountOnEnter","unmountOnExit","idealFacingMode","FACING_MODES","ENVIRONMENT","onTakePhotoAnimationDone","dataUri","AppBar","Toolbar","IconButton","edge","color","Menu","Typography","variant","Grid","container","item","src","Button","component","type","onChange","e","files","target","fileReader","FileReader","onload","base64Representation","result","readAsDataURL","spacing","sm","md","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bfd07fb9.chunk.js","sourcesContent":["import React from 'react';\n\nimport { styled, Card, CardContent, CardHeader } from '@material-ui/core';\n\nconst DivWithPointer = styled(({ ...props }) => <div {...props} />)({\n  cursor: 'pointer',\n});\n\nexport const Passage = ({ data }) => {\n  const { passage } = data;\n  const { book, verses } = passage;\n\n  return (\n    <Card>\n      <CardHeader title={book} />\n      <CardContent>\n        {verses.map(verse => {\n          const { content, number } = verse;\n\n          return (\n            <DivWithPointer key={content}>\n              <sup>{number}</sup>\n              <span>{content}</span>\n            </DivWithPointer>\n          );\n        })}\n      </CardContent>\n    </Card>\n  );\n};\n","import React from 'react';\n\nimport { Card, CardContent, CardHeader } from '@material-ui/core';\n\nexport const CrossReference = ({ data }) => {\n  const { crossReferences } = data;\n\n  return (\n    <Card>\n      <CardHeader title=\"Cross-references\" />\n      <CardContent>\n        {crossReferences.map(crossReference => (\n          <div key={crossReference}>{crossReference}</div>\n        ))}\n      </CardContent>\n    </Card>\n  );\n};\n","import React from 'react';\nimport Camera, { FACING_MODES } from 'react-html5-camera-photo';\nimport 'react-html5-camera-photo/build/css/index.css';\n\nimport {\n  CssBaseline,\n  styled,\n  makeStyles,\n  AppBar,\n  Drawer,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Toolbar,\n  Grid,\n  Typography,\n  Button,\n  Slide,\n} from '@material-ui/core';\nimport {\n  Menu as MenuIcon,\n  Equalizer as EqualizerIcon,\n  PhotoCamera as PhotoCameraIcon,\n} from '@material-ui/icons';\n\nimport { Passage } from './Passage';\nimport { CrossReference } from './CrossReference';\n\nconst useStyles = makeStyles({\n  root: {\n    fontSize: 'min(50vh, 50vw)',\n  },\n});\n\nconst ImageInput = styled('input')({\n  display: 'none',\n});\n\nconst Container = styled('div')({\n  padding: '16px',\n});\n\nconst CameraBackground = styled('div')({\n  height: '100vh',\n  width: '100vw',\n  'background-color': 'black',\n  position: 'absolute',\n  'z-index': 999,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n});\n\nconst Preview = styled('img')({\n  'max-width': '100%',\n  'max-height': '100%',\n});\n\nexport const App = () => {\n  const classes = useStyles();\n\n  const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);\n  const [isCameraOpen, setIsCameraOpen] = React.useState(false);\n  const [isPreview, setIsPreview] = React.useState(false);\n\n  const [view, setView] = React.useState('home');\n  const [image, setImage] = React.useState();\n  const [data, setData] = React.useState();\n\n  const handleOpenDrawer = () => {\n    setIsDrawerOpen(true);\n  };\n\n  const handleCloseDrawer = () => {\n    setIsDrawerOpen(false);\n  };\n\n  const handleOpenHome = () => {\n    setView('home');\n    setIsDrawerOpen(false);\n  };\n  const handleOpenResult = () => {\n    setView('result');\n    setIsDrawerOpen(false);\n  };\n\n  const handleSubmit = paramImage => {\n    const imageToPost = paramImage || image;\n    console.log(process.env.NODE_ENV);\n    const link = '/api/v1/image-to-passage';\n\n    fetch(link, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ image: imageToPost }),\n    })\n      .then(res => res.json())\n      .then(data => {\n        setData(data);\n        setView('result');\n        setIsPreview(false);\n      });\n  };\n\n  const handleSend = () => {\n    handleSubmit(image);\n  };\n\n  const handleUploadImage = e => {\n    const { files } = e.target;\n\n    const fileReader = new FileReader();\n    fileReader.onload = e => {\n      const base64Representation = e.target.result;\n      setImage(base64Representation);\n\n      handleSubmit(base64Representation);\n    };\n\n    fileReader.readAsDataURL(files[0]);\n  };\n\n  const handleTakePhoto = dataUri => {\n    setImage(dataUri);\n    setIsPreview(true);\n    setIsCameraOpen(false);\n  };\n\n  const handleOpenCamera = () => {\n    setIsCameraOpen(true);\n  };\n\n  return (\n    <>\n      <CssBaseline />\n\n      <Drawer anchor=\"left\" open={isDrawerOpen} onClose={handleCloseDrawer}>\n        <List>\n          <ListItem button onClick={handleOpenHome}>\n            <ListItemIcon>\n              <PhotoCameraIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Camera\" />\n          </ListItem>\n          {data && (\n            <ListItem button onClick={handleOpenResult}>\n              <ListItemIcon>\n                <EqualizerIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Result\" />\n            </ListItem>\n          )}\n        </List>\n      </Drawer>\n\n      <Slide direction=\"left\" in={isCameraOpen} mountOnEnter unmountOnExit>\n        <CameraBackground>\n          <Camera\n            idealFacingMode={FACING_MODES.ENVIRONMENT}\n            onTakePhotoAnimationDone={handleTakePhoto}\n          />\n        </CameraBackground>\n      </Slide>\n\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" onClick={handleOpenDrawer}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\">Magic Bible</Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Container>\n        <Grid container direction=\"column\" alignItems=\"center\">\n          {view === 'home' ? (\n            isPreview ? (\n              <>\n                <Grid item>\n                  <Preview src={image} />\n                </Grid>\n                <Grid item>\n                  <Button variant=\"contained\" onClick={handleSend}>\n                    Send\n                  </Button>\n                </Grid>\n              </>\n            ) : (\n              <>\n                <Grid item>\n                  <IconButton\n                    color=\"primary\"\n                    variant=\"contained\"\n                    component=\"label\"\n                    classes={classes}\n                    onClick={handleOpenCamera}\n                  >\n                    <PhotoCameraIcon classes={classes} />\n                  </IconButton>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"button\">or</Typography>\n                </Grid>\n                <Grid item>\n                  <Button variant=\"contained\" component=\"label\">\n                    Upload image\n                    <ImageInput type=\"file\" onChange={handleUploadImage} />\n                  </Button>\n                </Grid>\n              </>\n            )\n          ) : (\n            <Grid item>\n              <Grid container spacing={2}>\n                <Grid item sm={12} md={6}>\n                  <Passage data={data} />\n                </Grid>\n                <Grid item sm={12} md={6}>\n                  <CrossReference data={data} />\n                </Grid>\n              </Grid>\n            </Grid>\n          )}\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}