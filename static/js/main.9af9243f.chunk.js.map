{"version":3,"sources":["Passage.js","CrossReference.js","App.js","serviceWorker.js","index.js"],"names":["DivWithPointer","styled","props","cursor","Passage","passage","data","book","verses","Card","CardHeader","title","CardContent","map","verse","content","number","key","CrossReference","crossReferences","crossReference","useStyles","makeStyles","root","ImageInput","display","Container","padding","App","classes","React","useState","isDrawerOpen","setIsDrawerOpen","view","setView","setData","postToBackend","image","fetch","method","headers","body","JSON","stringify","then","res","json","Drawer","anchor","open","onClose","List","ListItem","button","onClick","ListItemIcon","PhotoCamera","ListItemText","primary","Equalizer","AppBar","position","Toolbar","IconButton","edge","color","Menu","Typography","variant","Grid","container","direction","alignItems","item","onTakePhoto","dataUri","component","type","onChange","e","files","target","fileReader","FileReader","onload","base64Representation","result","readAsDataURL","spacing","sm","md","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9af9243f.chunk.js","sourcesContent":["import React from 'react';\n\nimport { styled, Card, CardContent, CardHeader } from '@material-ui/core';\n\nconst DivWithPointer = styled(({ ...props }) => <div {...props} />)({\n  cursor: 'pointer',\n});\n\nexport const Passage = ({ data }) => {\n  const { passage } = data;\n  const { book, verses } = passage;\n\n  return (\n    <Card>\n      <CardHeader title={book} />\n      <CardContent>\n        {verses.map(verse => {\n          const { content, number } = verse;\n\n          return (\n            <DivWithPointer key={content}>\n              <sup>{number}</sup>\n              <span>{content}</span>\n            </DivWithPointer>\n          );\n        })}\n      </CardContent>\n    </Card>\n  );\n};\n","import React from 'react';\n\nimport { Card, CardContent, CardHeader } from '@material-ui/core';\n\nexport const CrossReference = ({ data }) => {\n  const { crossReferences } = data;\n\n  return (\n    <Card>\n      <CardHeader title=\"Cross-references\" />\n      <CardContent>\n        {crossReferences.map(crossReference => (\n          <div key={crossReference}>{crossReference}</div>\n        ))}\n      </CardContent>\n    </Card>\n  );\n};\n","import React from 'react';\nimport Camera from 'react-html5-camera-photo';\nimport 'react-html5-camera-photo/build/css/index.css';\n\nimport {\n  styled,\n  makeStyles,\n  AppBar,\n  Drawer,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Toolbar,\n  Grid,\n  Typography,\n} from '@material-ui/core';\nimport {\n  Menu as MenuIcon,\n  Equalizer as EqualizerIcon,\n  PhotoCamera as PhotoCameraIcon,\n} from '@material-ui/icons';\n\nimport { Passage } from './Passage';\nimport { CrossReference } from './CrossReference';\n\nconst useStyles = makeStyles({\n  root: {\n    // fontSize: 'min(50vh, 50vw)',\n  },\n});\n\nconst ImageInput = styled('input')({\n  display: 'none',\n});\n\nconst Container = styled('div')({\n  padding: '16px',\n});\n\nexport const App = () => {\n  const classes = useStyles();\n\n  const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);\n  const [view, setView] = React.useState('camera');\n  const [data, setData] = React.useState();\n\n  const handleOpenDrawer = () => {\n    setIsDrawerOpen(true);\n  };\n\n  const handleCloseDrawer = () => {\n    setIsDrawerOpen(false);\n  };\n\n  const handleOpenHome = () => {\n    setView('camera');\n    setIsDrawerOpen(false);\n  };\n  const handleOpenResult = () => {\n    setView('result');\n    setIsDrawerOpen(false);\n  };\n\n  const postToBackend = image => {\n    fetch('/api/v1/image-to-passage', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ image }),\n    })\n      .then(res => res.json())\n      .then(data => {\n        setData(data);\n        setView('result');\n      });\n  };\n\n  const handleUploadImage = e => {\n    const { files } = e.target;\n\n    const fileReader = new FileReader();\n    fileReader.onload = e => {\n      const base64Representation = e.target.result;\n\n      postToBackend(base64Representation);\n    };\n\n    fileReader.readAsDataURL(files[0]);\n  };\n\n  const handleTakePhoto = dataUri => {\n    postToBackend(dataUri);\n  };\n\n  return (\n    <>\n      <Drawer anchor=\"left\" open={isDrawerOpen} onClose={handleCloseDrawer}>\n        <List>\n          <ListItem button onClick={handleOpenHome}>\n            <ListItemIcon>\n              <PhotoCameraIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Camera\" />\n          </ListItem>\n          {data && (\n            <ListItem button onClick={handleOpenResult}>\n              <ListItemIcon>\n                <EqualizerIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Result\" />\n            </ListItem>\n          )}\n        </List>\n      </Drawer>\n\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" onClick={handleOpenDrawer}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\">Magic Bible</Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Grid container direction=\"column\" alignItems=\"center\">\n        <Grid item>\n          <Container>\n            {view === 'camera' ? (\n              <>\n                <Camera onTakePhoto={handleTakePhoto} />\n                <IconButton color=\"primary\" component=\"label\" classes={classes}>\n                  <PhotoCameraIcon classes={classes} />\n                  <ImageInput type=\"file\" onChange={handleUploadImage} />\n                </IconButton>\n                <Typography variant=\"h5\">Tap to upload image</Typography>\n              </>\n            ) : (\n              <Grid container spacing={2}>\n                <Grid item sm={12} md={6}>\n                  <Passage data={data} />\n                </Grid>\n                <Grid item sm={12} md={6}>\n                  <CrossReference data={data} />\n                </Grid>\n              </Grid>\n            )}\n          </Container>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}